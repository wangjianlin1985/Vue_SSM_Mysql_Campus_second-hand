<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，为了对sql语句进行隔离，方便管理，mapper开发dao方式，使用namespace有特殊作用  
mapper代理开发时将namespace指定为mapper接口的全限定名  
 -->
<mapper namespace="com.chengxusheji.mapper.OldLevelMapper"> 
<!--在mapper.xml文件中配置很多的sql语句，执行每个sql语句时，封装为MappedStatement对象 
mapper.xml以statement为单位管理sql语句  
 -->
	<!-- 添加新旧程度记录 -->
	<insert id="addOldLevel" parameterType="oldLevel">
		insert into t_oldLevel(levelName) values 
		(#{levelName})
	</insert>

	<!-- 按照查询条件分页查询新旧程度记录 -->
	<select id="queryOldLevel" resultMap="oldLevelMap" >
		select t_oldLevel.* from t_oldLevel ${where} limit #{startIndex},#{pageSize}
	</select>
	<resultMap id="oldLevelMap" type="oldLevel">
        <id property="levelId" column="levelId" />
    </resultMap>

    <!-- 按照查询条件查询所有新旧程度记录 -->
	<select id="queryOldLevelList" resultMap="oldLevelMap" >
		select t_oldLevel.* from t_oldLevel ${where}
	</select>

    <!-- 按照查询条件的新旧程度记录数 -->
	<select id="queryOldLevelCount" resultType="int">
		select count(*) from t_oldLevel ${where}
	</select>

	<!-- 根据主键查询某个新旧程度记录 -->
	<select id="getOldLevel" parameterType="int" resultMap="oldLevelMap">
		select * from t_oldLevel where t_oldLevel.levelId = #{levelId}
	</select>

	<!-- 更新新旧程度记录 -->
	<update id="updateOldLevel" parameterType="oldLevel">
		update t_oldLevel set levelName=#{levelName} where levelId = #{levelId}
	</update>

	<!-- 删除新旧程度记录 -->
	<delete id="deleteOldLevel" parameterType="int">
		delete from t_oldLevel where levelId=#{levelId}
	</delete>

</mapper>
